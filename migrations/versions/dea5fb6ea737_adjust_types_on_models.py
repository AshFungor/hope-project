"""Adjust types on models

Revision ID: dea5fb6ea737
Revises: 
Create Date: 2025-06-24 21:30:43.423794

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dea5fb6ea737'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('company')
    op.drop_table('consumption')
    op.drop_table('product')
    op.drop_table('office')
    op.drop_table('user_to_company')
    op.drop_table('infrastructure')
    op.drop_table('prefecture')
    op.drop_table('product_to_bank_account')
    op.drop_table('bank_account')
    op.drop_table('city_hall')
    op.drop_table('users')
    op.drop_table('transaction')
    op.drop_table('city')
    op.drop_table('goal')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('goal',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('amount_on_setup', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('amount_on_validate', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('complete', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], name=op.f('goal_bank_account_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('goal_pkey'))
    )
    op.create_table('city',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('city_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('mayor_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('prefecture_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], name='city_bank_account_id_fkey'),
    sa.ForeignKeyConstraint(['mayor_id'], ['users.id'], name='city_mayor_id_fkey'),
    sa.ForeignKeyConstraint(['prefecture_id'], ['prefecture.id'], name='city_prefecture_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='city_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('transaction',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('product_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('customer_bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('seller_bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('count', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_bank_account_id'], ['bank_account.id'], name=op.f('transaction_customer_bank_account_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name=op.f('transaction_product_id_fkey')),
    sa.ForeignKeyConstraint(['seller_bank_account_id'], ['bank_account.id'], name=op.f('transaction_seller_bank_account_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('transaction_pkey'))
    )
    op.create_table('users',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('city_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('patronymic', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('login', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('sex', sa.VARCHAR(length=16), autoincrement=False, nullable=False),
    sa.Column('bonus', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('birthday', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('is_admin', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], name='users_bank_account_id_fkey'),
    sa.ForeignKeyConstraint(['city_id'], ['city.id'], name='users_city_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('city_hall',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('mayor_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('economic_assistant_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('social_assistant_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], name=op.f('city_hall_bank_account_id_fkey')),
    sa.ForeignKeyConstraint(['economic_assistant_id'], ['users.id'], name=op.f('city_hall_economic_assistant_id_fkey')),
    sa.ForeignKeyConstraint(['mayor_id'], ['users.id'], name=op.f('city_hall_mayor_id_fkey')),
    sa.ForeignKeyConstraint(['social_assistant_id'], ['users.id'], name=op.f('city_hall_social_assistant_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('city_hall_pkey'))
    )
    op.create_table('bank_account',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('bank_account_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name='bank_account_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('product_to_bank_account',
    sa.Column('bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('count', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], name=op.f('product_to_bank_account_bank_account_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name=op.f('product_to_bank_account_product_id_fkey')),
    sa.PrimaryKeyConstraint('bank_account_id', 'product_id', name=op.f('product_to_bank_account_pkey'))
    )
    op.create_table('prefecture',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('prefecture_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('prefect_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('economic_assistant_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('social_assistant_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], name='prefecture_bank_account_id_fkey'),
    sa.ForeignKeyConstraint(['economic_assistant_id'], ['users.id'], name='prefecture_economic_assistant_id_fkey'),
    sa.ForeignKeyConstraint(['prefect_id'], ['users.id'], name='prefecture_prefect_id_fkey'),
    sa.ForeignKeyConstraint(['social_assistant_id'], ['users.id'], name='prefecture_social_assistant_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='prefecture_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('infrastructure',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('prefecture_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['prefecture_id'], ['prefecture.id'], name=op.f('infrastructure_prefecture_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('infrastructure_pkey'))
    )
    op.create_table('user_to_company',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('ratio', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('fired_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('employed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name=op.f('user_to_company_company_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_to_company_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_to_company_pkey'))
    )
    op.create_table('office',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('city_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('founded_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('dismissed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['city_id'], ['city.id'], name=op.f('office_city_id_fkey')),
    sa.ForeignKeyConstraint(['company_id'], ['company.id'], name=op.f('office_company_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('office_pkey'))
    )
    op.create_table('product',
    sa.Column('id', sa.BIGINT(), server_default=sa.text("nextval('product_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('level', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='product_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('consumption',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('product_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('count', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('consumed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], name=op.f('consumption_bank_account_id_fkey')),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], name=op.f('consumption_product_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('consumption_pkey'))
    )
    op.create_table('company',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('bank_account_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('prefecture_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('about', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bank_account.id'], name=op.f('company_bank_account_id_fkey')),
    sa.ForeignKeyConstraint(['prefecture_id'], ['prefecture.id'], name=op.f('company_prefecture_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('company_pkey')),
    sa.UniqueConstraint('name', name=op.f('company_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
